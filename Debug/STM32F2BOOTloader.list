
STM32F2BOOTloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000296c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08002af0  08002af0  00012af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c3c  08002c3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c44  08002c44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c44  08002c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000010  08002c5c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002c5c  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009197  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ef0  00000000  00000000  00029213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0002b108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000660  00000000  00000000  0002b978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cd4a  00000000  00000000  0002bfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b467  00000000  00000000  00048d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac403  00000000  00000000  00054189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020a0  00000000  00000000  0010058c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0010262c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000010 	.word	0x20000010
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08002ad8 	.word	0x08002ad8

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000014 	.word	0x20000014
 80001c0:	08002ad8 	.word	0x08002ad8

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b972 	b.w	80004c0 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14c      	bne.n	800029e <__udivmoddi4+0xaa>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d967      	bls.n	80002da <__udivmoddi4+0xe6>
 800020a:	fab2 f382 	clz	r3, r2
 800020e:	b153      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000210:	fa02 fc03 	lsl.w	ip, r2, r3
 8000214:	f1c3 0220 	rsb	r2, r3, #32
 8000218:	fa01 fe03 	lsl.w	lr, r1, r3
 800021c:	fa20 f202 	lsr.w	r2, r0, r2
 8000220:	ea42 0e0e 	orr.w	lr, r2, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fbbe f1f7 	udiv	r1, lr, r7
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fb07 ee11 	mls	lr, r7, r1, lr
 8000236:	fb01 f005 	mul.w	r0, r1, r5
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 3eff 	add.w	lr, r1, #4294967295
 800024c:	f080 8119 	bcs.w	8000482 <__udivmoddi4+0x28e>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8116 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000260:	fb07 2210 	mls	r2, r7, r0, r2
 8000264:	fb00 f505 	mul.w	r5, r0, r5
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8104 	bcs.w	8000486 <__udivmoddi4+0x292>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8101 	bls.w	8000486 <__udivmoddi4+0x292>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	2100      	movs	r1, #0
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa6>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xc0>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ea 	beq.w	800047c <__udivmoddi4+0x288>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d148      	bne.n	800034e <__udivmoddi4+0x15a>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xd2>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4696      	mov	lr, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa6>
 80002d4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa6>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xea>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 808e 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e8:	1a88      	subs	r0, r1, r2
 80002ea:	2101      	movs	r1, #1
 80002ec:	0c17      	lsrs	r7, r2, #16
 80002ee:	fa1f fe82 	uxth.w	lr, r2
 80002f2:	fbb0 f5f7 	udiv	r5, r0, r7
 80002f6:	fb07 0015 	mls	r0, r7, r5, r0
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000300:	fb0e f005 	mul.w	r0, lr, r5
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x126>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 80cc 	bhi.w	80004b0 <__udivmoddi4+0x2bc>
 8000318:	4645      	mov	r5, r8
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000320:	fb07 2210 	mls	r2, r7, r0, r2
 8000324:	fb0e fe00 	mul.w	lr, lr, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	45a6      	cmp	lr, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x150>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14e>
 800033c:	45a6      	cmp	lr, r4
 800033e:	f200 80b4 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 8000342:	4610      	mov	r0, r2
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034c:	e7a0      	b.n	8000290 <__udivmoddi4+0x9c>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000360:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000364:	fbba f8f9 	udiv	r8, sl, r9
 8000368:	408d      	lsls	r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	432b      	orrs	r3, r5
 8000378:	fa00 f501 	lsl.w	r5, r0, r1
 800037c:	fb08 f00e 	mul.w	r0, r8, lr
 8000380:	0c1c      	lsrs	r4, r3, #16
 8000382:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000386:	42a0      	cmp	r0, r4
 8000388:	fa02 f201 	lsl.w	r2, r2, r1
 800038c:	d90b      	bls.n	80003a6 <__udivmoddi4+0x1b2>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f108 3aff 	add.w	sl, r8, #4294967295
 8000396:	f080 8086 	bcs.w	80004a6 <__udivmoddi4+0x2b2>
 800039a:	42a0      	cmp	r0, r4
 800039c:	f240 8083 	bls.w	80004a6 <__udivmoddi4+0x2b2>
 80003a0:	f1a8 0802 	sub.w	r8, r8, #2
 80003a4:	4464      	add	r4, ip
 80003a6:	1a24      	subs	r4, r4, r0
 80003a8:	b298      	uxth	r0, r3
 80003aa:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ae:	fb09 4413 	mls	r4, r9, r3, r4
 80003b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ba:	45a6      	cmp	lr, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c6:	d26a      	bcs.n	800049e <__udivmoddi4+0x2aa>
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d968      	bls.n	800049e <__udivmoddi4+0x2aa>
 80003cc:	3b02      	subs	r3, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003d4:	fba0 9302 	umull	r9, r3, r0, r2
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	429c      	cmp	r4, r3
 80003de:	46c8      	mov	r8, r9
 80003e0:	469e      	mov	lr, r3
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d067      	beq.n	80004ba <__udivmoddi4+0x2c6>
 80003ea:	ebb5 0308 	subs.w	r3, r5, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	2100      	movs	r1, #0
 8000402:	e74a      	b.n	800029a <__udivmoddi4+0xa6>
 8000404:	fa02 fc03 	lsl.w	ip, r2, r3
 8000408:	f1c3 0020 	rsb	r0, r3, #32
 800040c:	40c1      	lsrs	r1, r0
 800040e:	409d      	lsls	r5, r3
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000418:	4328      	orrs	r0, r5
 800041a:	fbb1 f5f7 	udiv	r5, r1, r7
 800041e:	fb07 1115 	mls	r1, r7, r5, r1
 8000422:	fa1f fe8c 	uxth.w	lr, ip
 8000426:	0c02      	lsrs	r2, r0, #16
 8000428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800042c:	fb05 f10e 	mul.w	r1, r5, lr
 8000430:	4291      	cmp	r1, r2
 8000432:	fa04 f403 	lsl.w	r4, r4, r3
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x256>
 8000438:	eb1c 0202 	adds.w	r2, ip, r2
 800043c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000440:	d22f      	bcs.n	80004a2 <__udivmoddi4+0x2ae>
 8000442:	4291      	cmp	r1, r2
 8000444:	d92d      	bls.n	80004a2 <__udivmoddi4+0x2ae>
 8000446:	3d02      	subs	r5, #2
 8000448:	4462      	add	r2, ip
 800044a:	1a52      	subs	r2, r2, r1
 800044c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000450:	fb07 2211 	mls	r2, r7, r1, r2
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800045a:	fb01 f20e 	mul.w	r2, r1, lr
 800045e:	4282      	cmp	r2, r0
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x280>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d216      	bcs.n	800049a <__udivmoddi4+0x2a6>
 800046c:	4282      	cmp	r2, r0
 800046e:	d914      	bls.n	800049a <__udivmoddi4+0x2a6>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4631      	mov	r1, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e70b      	b.n	800029a <__udivmoddi4+0xa6>
 8000482:	4671      	mov	r1, lr
 8000484:	e6e9      	b.n	800025a <__udivmoddi4+0x66>
 8000486:	4610      	mov	r0, r2
 8000488:	e6fe      	b.n	8000288 <__udivmoddi4+0x94>
 800048a:	454d      	cmp	r5, r9
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb9 0802 	subs.w	r8, r9, r2
 8000492:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000496:	3801      	subs	r0, #1
 8000498:	e7a5      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049a:	4641      	mov	r1, r8
 800049c:	e7ea      	b.n	8000474 <__udivmoddi4+0x280>
 800049e:	4603      	mov	r3, r0
 80004a0:	e796      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a2:	4645      	mov	r5, r8
 80004a4:	e7d1      	b.n	800044a <__udivmoddi4+0x256>
 80004a6:	46d0      	mov	r8, sl
 80004a8:	e77d      	b.n	80003a6 <__udivmoddi4+0x1b2>
 80004aa:	4464      	add	r4, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e749      	b.n	8000344 <__udivmoddi4+0x150>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e731      	b.n	800031a <__udivmoddi4+0x126>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xdc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e6ed      	b.n	800029a <__udivmoddi4+0xa6>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <flash_erase>:
 * @brief   This function erases the memory.
 * @param   address: First address to be erased (the last is the end of the flash).
 * @return  status: Report about the success of the erasing.
 */
flash_status flash_erase(uint32_t address)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  HAL_FLASH_Unlock();
 80004cc:	f000 fe9a 	bl	8001204 <HAL_FLASH_Unlock>

  flash_status status = FLASH_ERROR;
 80004d0:	23ff      	movs	r3, #255	; 0xff
 80004d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  FLASH_EraseInitTypeDef erase_init;
  uint32_t error = 0u;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
//  erase_init.PageAddress = address;
//  erase_init.Banks = FLASH_BANK_1;
//  /* Calculate the number of pages from "address" and the end of flash. */
//  erase_init.NbPages = (FLASH_BANK1_END - address) / FLASH_PAGE_SIZE;

  erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
  erase_init.Banks = FLASH_BANK_1;
 80004de:	2301      	movs	r3, #1
 80004e0:	617b      	str	r3, [r7, #20]
  erase_init.Sector = FLASH_SECTOR_4;
 80004e2:	2304      	movs	r3, #4
 80004e4:	61bb      	str	r3, [r7, #24]
  erase_init.NbSectors = 4;
 80004e6:	2304      	movs	r3, #4
 80004e8:	61fb      	str	r3, [r7, #28]
	erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80004ea:	2302      	movs	r3, #2
 80004ec:	623b      	str	r3, [r7, #32]
  /* Do the actual erasing. */
  if (HAL_OK == HAL_FLASHEx_Erase(&erase_init, &error))
 80004ee:	f107 020c 	add.w	r2, r7, #12
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	4611      	mov	r1, r2
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 ffe1 	bl	80014c0 <HAL_FLASHEx_Erase>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d102      	bne.n	800050a <flash_erase+0x46>
  {
    status = FLASH_OK;
 8000504:	2300      	movs	r3, #0
 8000506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  HAL_FLASH_Lock();
 800050a:	f000 fe9d 	bl	8001248 <HAL_FLASH_Lock>

  return status;
 800050e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000512:	4618      	mov	r0, r3
 8000514:	3728      	adds	r7, #40	; 0x28
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <flash_write>:
 * @param   *data:   Array of the data that we want to write.
 * @param   *length: Size of the array.
 * @return  status: Report about the success of the writing.
 */
flash_status flash_write(uint32_t address, uint32_t *data, uint32_t length)
{
 800051a:	b5b0      	push	{r4, r5, r7, lr}
 800051c:	b086      	sub	sp, #24
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
  flash_status status = FLASH_OK;
 8000526:	2300      	movs	r3, #0
 8000528:	75fb      	strb	r3, [r7, #23]

  HAL_FLASH_Unlock();
 800052a:	f000 fe6b 	bl	8001204 <HAL_FLASH_Unlock>

  /* Loop through the array. */
  for (uint32_t i = 0u; (i < length) && (FLASH_OK == status); i++)
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	e027      	b.n	8000584 <flash_write+0x6a>
//      status |= FLASH_ERROR_SIZE;
//    }
//    else
//    {
      /* The actual flashing. If there is an error, then report it. */
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data[i]))
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	4413      	add	r3, r2
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2200      	movs	r2, #0
 8000540:	461c      	mov	r4, r3
 8000542:	4615      	mov	r5, r2
 8000544:	4622      	mov	r2, r4
 8000546:	462b      	mov	r3, r5
 8000548:	68f9      	ldr	r1, [r7, #12]
 800054a:	2002      	movs	r0, #2
 800054c:	f000 fe06 	bl	800115c <HAL_FLASH_Program>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d003      	beq.n	800055e <flash_write+0x44>
      {
        status |= FLASH_ERROR_WRITE;
 8000556:	7dfb      	ldrb	r3, [r7, #23]
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	75fb      	strb	r3, [r7, #23]
      }
      /* Read back the content of the memory. If it is wrong, then report an error. */
      if (((data[i])) != (*(volatile uint32_t*)address))
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	4413      	add	r3, r2
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d003      	beq.n	8000578 <flash_write+0x5e>
      {
        status |= FLASH_ERROR_READBACK;
 8000570:	7dfb      	ldrb	r3, [r7, #23]
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	75fb      	strb	r3, [r7, #23]
      }

      /* Shift the address by a word. */
      address += 4u;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3304      	adds	r3, #4
 800057c:	60fb      	str	r3, [r7, #12]
  for (uint32_t i = 0u; (i < length) && (FLASH_OK == status); i++)
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	3301      	adds	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693a      	ldr	r2, [r7, #16]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	d202      	bcs.n	8000592 <flash_write+0x78>
 800058c:	7dfb      	ldrb	r3, [r7, #23]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0d0      	beq.n	8000534 <flash_write+0x1a>
    }
  //}

  HAL_FLASH_Lock();
 8000592:	f000 fe59 	bl	8001248 <HAL_FLASH_Lock>

  return status;
 8000596:	7dfb      	ldrb	r3, [r7, #23]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bdb0      	pop	{r4, r5, r7, pc}

080005a0 <flash_jump_to_app>:
 * @brief   Actually jumps to the user application.
 * @param   void
 * @return  void
 */
void flash_jump_to_app(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* Function pointer to the address of the user application. */
  fnc_ptr jump_to_app;
  jump_to_app = (fnc_ptr)(*(volatile uint32_t*) (FLASH_APP_START_ADDRESS+4u));
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <flash_jump_to_app+0x2c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	607b      	str	r3, [r7, #4]
  HAL_DeInit();
 80005ac:	f000 fbfa 	bl	8000da4 <HAL_DeInit>
  /* Change the main stack pointer. */
  __set_MSP(*(volatile uint32_t*)FLASH_APP_START_ADDRESS);
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <flash_jump_to_app+0x30>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	f383 8808 	msr	MSP, r3
}
 80005bc:	bf00      	nop
  jump_to_app();
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4798      	blx	r3
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	08008004 	.word	0x08008004
 80005d0:	08008000 	.word	0x08008000

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fbc2 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f826 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f88a 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 f85e 	bl	80006a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Send welcome message on startup. */
  uart_transmit_str((uint8_t*)"\n\r================================\n\r");
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <main+0x40>)
 80005ea:	f000 f95b 	bl	80008a4 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"UART Bootloader\n\r");
 80005ee:	480a      	ldr	r0, [pc, #40]	; (8000618 <main+0x44>)
 80005f0:	f000 f958 	bl	80008a4 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"https://github.com/ferenc-nemeth\n\r");
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <main+0x48>)
 80005f6:	f000 f955 	bl	80008a4 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"================================\n\r\n\r");
 80005fa:	4809      	ldr	r0, [pc, #36]	; (8000620 <main+0x4c>)
 80005fc:	f000 f952 	bl	80008a4 <uart_transmit_str>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Ask for new data and start the Xmodem protocol. */
    uart_transmit_str((uint8_t*)"Please send a new binary file with Xmodem protocol to update the firmware.\n\r");
 8000600:	4808      	ldr	r0, [pc, #32]	; (8000624 <main+0x50>)
 8000602:	f000 f94f 	bl	80008a4 <uart_transmit_str>
    xmodem_receive();
 8000606:	f000 f997 	bl	8000938 <xmodem_receive>
    /* We only exit the xmodem protocol, if there are any errors.
     * In that case, notify the user and start over. */
    uart_transmit_str((uint8_t*)"\n\rFailed... Please try again.\n\r");
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <main+0x54>)
 800060c:	f000 f94a 	bl	80008a4 <uart_transmit_str>
    uart_transmit_str((uint8_t*)"Please send a new binary file with Xmodem protocol to update the firmware.\n\r");
 8000610:	e7f6      	b.n	8000600 <main+0x2c>
 8000612:	bf00      	nop
 8000614:	08002af0 	.word	0x08002af0
 8000618:	08002b18 	.word	0x08002b18
 800061c:	08002b2c 	.word	0x08002b2c
 8000620:	08002b50 	.word	0x08002b50
 8000624:	08002b78 	.word	0x08002b78
 8000628:	08002bc8 	.word	0x08002bc8

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b092      	sub	sp, #72	; 0x48
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fa20 	bl	8002a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064e:	2302      	movs	r3, #2
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065a:	2300      	movs	r3, #0
 800065c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	4618      	mov	r0, r3
 8000664:	f001 f9f2 	bl	8001a4c <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800066e:	f000 f85b 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fc32 	bl	8001ef4 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000696:	f000 f847 	bl	8000728 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3748      	adds	r7, #72	; 0x48
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_USART2_UART_Init+0x50>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006dc:	f001 fe0a 	bl	80022f4 <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e6:	f000 f81f 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000002c 	.word	0x2000002c
 80006f4:	40004400 	.word	0x40004400

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_GPIO_Init+0x2c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a07      	ldr	r2, [pc, #28]	; (8000724 <MX_GPIO_Init+0x2c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <MX_GPIO_Init+0x2c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40023800 	.word	0x40023800

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_MspInit+0x48>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <HAL_MspInit+0x48>)
 8000744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000748:	6453      	str	r3, [r2, #68]	; 0x44
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_MspInit+0x48>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_MspInit+0x48>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_MspInit+0x48>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_MspInit+0x48>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	40023800 	.word	0x40023800

08000780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a19      	ldr	r2, [pc, #100]	; (8000804 <HAL_UART_MspInit+0x84>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d12b      	bne.n	80007fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <HAL_UART_MspInit+0x88>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <HAL_UART_MspInit+0x88>)
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_UART_MspInit+0x88>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <HAL_UART_MspInit+0x88>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <HAL_UART_MspInit+0x88>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <HAL_UART_MspInit+0x88>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007da:	230c      	movs	r3, #12
 80007dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ea:	2307      	movs	r3, #7
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <HAL_UART_MspInit+0x8c>)
 80007f6:	f000 ff8b 	bl	8001710 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40004400 	.word	0x40004400
 8000808:	40023800 	.word	0x40023800
 800080c:	40020000 	.word	0x40020000

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000814:	e7fe      	b.n	8000814 <NMI_Handler+0x4>

08000816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler+0x4>

08000822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <UsageFault_Handler+0x4>

0800082e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr

0800083a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000856:	f000 fb07 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}

0800085e <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
	...

0800086c <uart_receive>:
 * @param   *data: Array to save the received data.
 * @param   length:  Size of the data.
 * @return  status: Report about the success of the receiving.
 */
uart_status uart_receive(uint8_t *data, uint16_t length)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	807b      	strh	r3, [r7, #2]
  uart_status status = UART_ERROR;
 8000878:	23ff      	movs	r3, #255	; 0xff
 800087a:	73fb      	strb	r3, [r7, #15]

  if (HAL_OK == HAL_UART_Receive(&huart2, data, length, UART_TIMEOUT))
 800087c:	887a      	ldrh	r2, [r7, #2]
 800087e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	4806      	ldr	r0, [pc, #24]	; (80008a0 <uart_receive+0x34>)
 8000886:	f001 fe08 	bl	800249a <HAL_UART_Receive>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d101      	bne.n	8000894 <uart_receive+0x28>
  {
    status = UART_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000002c 	.word	0x2000002c

080008a4 <uart_transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_str(uint8_t *data)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 80008ac:	23ff      	movs	r3, #255	; 0xff
 80008ae:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0u;
 80008b0:	2300      	movs	r3, #0
 80008b2:	81bb      	strh	r3, [r7, #12]

  /* Calculate the length. */
  while ('\0' != data[length])
 80008b4:	e002      	b.n	80008bc <uart_transmit_str+0x18>
  {
    length++;
 80008b6:	89bb      	ldrh	r3, [r7, #12]
 80008b8:	3301      	adds	r3, #1
 80008ba:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[length])
 80008bc:	89bb      	ldrh	r3, [r7, #12]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1f6      	bne.n	80008b6 <uart_transmit_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&huart2, data, length, UART_TIMEOUT))
 80008c8:	89ba      	ldrh	r2, [r7, #12]
 80008ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <uart_transmit_str+0x48>)
 80008d2:	f001 fd5f 	bl	8002394 <HAL_UART_Transmit>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d101      	bne.n	80008e0 <uart_transmit_str+0x3c>
  {
    status = UART_OK;
 80008dc:	2300      	movs	r3, #0
 80008de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000002c 	.word	0x2000002c

080008f0 <uart_transmit_ch>:
 * @brief   Transmits a single char to UART.
 * @param   *data: The char.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_ch(uint8_t data)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  uart_status status = UART_ERROR;
 80008fa:	23ff      	movs	r3, #255	; 0xff
 80008fc:	73fb      	strb	r3, [r7, #15]

  /* Make available the UART module. */
  if (HAL_UART_STATE_TIMEOUT == HAL_UART_GetState(&huart2))
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <uart_transmit_ch+0x44>)
 8000900:	f001 ff48 	bl	8002794 <HAL_UART_GetState>
 8000904:	4603      	mov	r3, r0
 8000906:	2ba0      	cmp	r3, #160	; 0xa0
 8000908:	d102      	bne.n	8000910 <uart_transmit_ch+0x20>
  {
    HAL_UART_Abort(&huart2);
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <uart_transmit_ch+0x44>)
 800090c:	f001 fe57 	bl	80025be <HAL_UART_Abort>
  }

  if (HAL_OK == HAL_UART_Transmit(&huart2, &data, 1u, UART_TIMEOUT))
 8000910:	1df9      	adds	r1, r7, #7
 8000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000916:	2201      	movs	r2, #1
 8000918:	4806      	ldr	r0, [pc, #24]	; (8000934 <uart_transmit_ch+0x44>)
 800091a:	f001 fd3b 	bl	8002394 <HAL_UART_Transmit>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d101      	bne.n	8000928 <uart_transmit_ch+0x38>
  {
    status = UART_OK;
 8000924:	2300      	movs	r3, #0
 8000926:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000928:	7bfb      	ldrb	r3, [r7, #15]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000002c 	.word	0x2000002c

08000938 <xmodem_receive>:
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  void
 */
void xmodem_receive(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  volatile xmodem_status status = X_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	717b      	strb	r3, [r7, #5]
  uint8_t error_number = 0u;
 8000942:	2300      	movs	r3, #0
 8000944:	713b      	strb	r3, [r7, #4]

  x_first_packet_received = false;
 8000946:	4b3f      	ldr	r3, [pc, #252]	; (8000a44 <xmodem_receive+0x10c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
  xmodem_packet_number = 1u;
 800094c:	4b3e      	ldr	r3, [pc, #248]	; (8000a48 <xmodem_receive+0x110>)
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
  xmodem_actual_flash_address = FLASH_APP_START_ADDRESS;
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <xmodem_receive+0x114>)
 8000954:	4a3e      	ldr	r2, [pc, #248]	; (8000a50 <xmodem_receive+0x118>)
 8000956:	601a      	str	r2, [r3, #0]

  /* Loop until there isn't any error (or until we jump to the user application). */
  while (X_OK == status)
 8000958:	e06a      	b.n	8000a30 <xmodem_receive+0xf8>
  {
    uint8_t header = 0x00u;
 800095a:	2300      	movs	r3, #0
 800095c:	70fb      	strb	r3, [r7, #3]

    /* Get the header from UART. */
    uart_status comm_status = uart_receive(&header, 1u);
 800095e:	1cfb      	adds	r3, r7, #3
 8000960:	2101      	movs	r1, #1
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff82 	bl	800086c <uart_receive>
 8000968:	4603      	mov	r3, r0
 800096a:	71fb      	strb	r3, [r7, #7]

    /* Spam the host (until we receive something) with ACSII "C", to notify it, we want to use CRC-16. */
    if ((UART_OK != comm_status) && (false == x_first_packet_received))
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d007      	beq.n	8000982 <xmodem_receive+0x4a>
 8000972:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <xmodem_receive+0x10c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d103      	bne.n	8000982 <xmodem_receive+0x4a>
    {
      (void)uart_transmit_ch(X_C);
 800097a:	2043      	movs	r0, #67	; 0x43
 800097c:	f7ff ffb8 	bl	80008f0 <uart_transmit_ch>
 8000980:	e00d      	b.n	800099e <xmodem_receive+0x66>
    }
    /* Uart timeout or any other errors. */
    else if ((UART_OK != comm_status) && (true == x_first_packet_received))
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00a      	beq.n	800099e <xmodem_receive+0x66>
 8000988:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <xmodem_receive+0x10c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d106      	bne.n	800099e <xmodem_receive+0x66>
    {
      status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2103      	movs	r1, #3
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f993 	bl	8000cc0 <xmodem_error_handler>
 800099a:	4603      	mov	r3, r0
 800099c:	717b      	strb	r3, [r7, #5]
    {
      /* Do nothing. */
    }

    /* The header can be: SOH, STX, EOT and CAN. */
    switch(header)
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	2b18      	cmp	r3, #24
 80009a2:	d037      	beq.n	8000a14 <xmodem_receive+0xdc>
 80009a4:	2b18      	cmp	r3, #24
 80009a6:	dc38      	bgt.n	8000a1a <xmodem_receive+0xe2>
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	dc02      	bgt.n	80009b2 <xmodem_receive+0x7a>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	dc03      	bgt.n	80009b8 <xmodem_receive+0x80>
 80009b0:	e033      	b.n	8000a1a <xmodem_receive+0xe2>
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d022      	beq.n	80009fc <xmodem_receive+0xc4>
 80009b6:	e030      	b.n	8000a1a <xmodem_receive+0xe2>
      xmodem_status packet_status = X_ERROR;
      /* 128 or 1024 bytes of data. */
      case X_SOH:
      case X_STX:
        /* If the handling was successful, then send an ACK. */
        packet_status = xmodem_handle_packet(header);
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f888 	bl	8000ad0 <xmodem_handle_packet>
 80009c0:	4603      	mov	r3, r0
 80009c2:	71bb      	strb	r3, [r7, #6]
        if (X_OK == packet_status)
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d103      	bne.n	80009d2 <xmodem_receive+0x9a>
        {
          (void)uart_transmit_ch(X_ACK);
 80009ca:	2006      	movs	r0, #6
 80009cc:	f7ff ff90 	bl	80008f0 <uart_transmit_ch>
        /* Error while processing the packet, either send a NAK or do graceful abort. */
        else
        {
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
        }
        break;
 80009d0:	e02e      	b.n	8000a30 <xmodem_receive+0xf8>
        else if (X_ERROR_FLASH == packet_status)
 80009d2:	79bb      	ldrb	r3, [r7, #6]
 80009d4:	2b08      	cmp	r3, #8
 80009d6:	d109      	bne.n	80009ec <xmodem_receive+0xb4>
          error_number = X_MAX_ERRORS;
 80009d8:	2303      	movs	r3, #3
 80009da:	713b      	strb	r3, [r7, #4]
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2103      	movs	r1, #3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 f96d 	bl	8000cc0 <xmodem_error_handler>
 80009e6:	4603      	mov	r3, r0
 80009e8:	717b      	strb	r3, [r7, #5]
        break;
 80009ea:	e021      	b.n	8000a30 <xmodem_receive+0xf8>
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2103      	movs	r1, #3
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f965 	bl	8000cc0 <xmodem_error_handler>
 80009f6:	4603      	mov	r3, r0
 80009f8:	717b      	strb	r3, [r7, #5]
        break;
 80009fa:	e019      	b.n	8000a30 <xmodem_receive+0xf8>
      /* End of Transmission. */
      case X_EOT:
        /* ACK, feedback to user (as a text), then jump to user application. */
        (void)uart_transmit_ch(X_ACK);
 80009fc:	2006      	movs	r0, #6
 80009fe:	f7ff ff77 	bl	80008f0 <uart_transmit_ch>
        (void)uart_transmit_str((uint8_t*)"\n\rFirmware updated!\n\r");
 8000a02:	4814      	ldr	r0, [pc, #80]	; (8000a54 <xmodem_receive+0x11c>)
 8000a04:	f7ff ff4e 	bl	80008a4 <uart_transmit_str>
        (void)uart_transmit_str((uint8_t*)"Jumping to user application...\n\r");
 8000a08:	4813      	ldr	r0, [pc, #76]	; (8000a58 <xmodem_receive+0x120>)
 8000a0a:	f7ff ff4b 	bl	80008a4 <uart_transmit_str>
        flash_jump_to_app();
 8000a0e:	f7ff fdc7 	bl	80005a0 <flash_jump_to_app>
        break;
 8000a12:	e00d      	b.n	8000a30 <xmodem_receive+0xf8>
      /* Abort from host. */
      case X_CAN:
        status = X_ERROR;
 8000a14:	23ff      	movs	r3, #255	; 0xff
 8000a16:	717b      	strb	r3, [r7, #5]
        break;
 8000a18:	e00a      	b.n	8000a30 <xmodem_receive+0xf8>
      default:
        /* Wrong header. */
        if (UART_OK == comm_status)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d106      	bne.n	8000a2e <xmodem_receive+0xf6>
        {
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2103      	movs	r1, #3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f94b 	bl	8000cc0 <xmodem_error_handler>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	717b      	strb	r3, [r7, #5]
        }
        break;
 8000a2e:	bf00      	nop
  while (X_OK == status)
 8000a30:	797b      	ldrb	r3, [r7, #5]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d090      	beq.n	800095a <xmodem_receive+0x22>
    }
  }
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000078 	.word	0x20000078
 8000a48:	20000004 	.word	0x20000004
 8000a4c:	20000074 	.word	0x20000074
 8000a50:	08008000 	.word	0x08008000
 8000a54:	08002be8 	.word	0x08002be8
 8000a58:	08002c00 	.word	0x08002c00

08000a5c <xmodem_calc_crc>:
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t xmodem_calc_crc(uint8_t *data, uint16_t length)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	81fb      	strh	r3, [r7, #14]
    while (length)
 8000a6c:	e026      	b.n	8000abc <xmodem_calc_crc+0x60>
    {
        length--;
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	3b01      	subs	r3, #1
 8000a72:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a84:	4053      	eors	r3, r2
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	737b      	strb	r3, [r7, #13]
 8000a8e:	e012      	b.n	8000ab6 <xmodem_calc_crc+0x5a>
        {
            if (crc & 0x8000u)
 8000a90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	da08      	bge.n	8000aaa <xmodem_calc_crc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
 8000a98:	89fb      	ldrh	r3, [r7, #14]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000aa2:	f083 0301 	eor.w	r3, r3, #1
 8000aa6:	81fb      	strh	r3, [r7, #14]
 8000aa8:	e002      	b.n	8000ab0 <xmodem_calc_crc+0x54>
            }
            else
            {
                crc = crc << 1u;
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8000ab0:	7b7b      	ldrb	r3, [r7, #13]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	737b      	strb	r3, [r7, #13]
 8000ab6:	7b7b      	ldrb	r3, [r7, #13]
 8000ab8:	2b07      	cmp	r3, #7
 8000aba:	d9e9      	bls.n	8000a90 <xmodem_calc_crc+0x34>
    while (length)
 8000abc:	887b      	ldrh	r3, [r7, #2]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1d5      	bne.n	8000a6e <xmodem_calc_crc+0x12>
            }
        }
    }
    return crc;
 8000ac2:	89fb      	ldrh	r3, [r7, #14]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
	...

08000ad0 <xmodem_handle_packet>:
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000ade:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 8000ae2:	701a      	strb	r2, [r3, #0]
  xmodem_status status = X_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  uint16_t size = 0u;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
  uint8_t received_packet_number[X_PACKET_NUMBER_SIZE];
  uint8_t received_packet_data[X_PACKET_1024_SIZE];
  uint8_t received_packet_crc[X_PACKET_CRC_SIZE];

  /* Get the size of the data. */
  if (X_SOH == header)
 8000af0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000af4:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d103      	bne.n	8000b06 <xmodem_handle_packet+0x36>
  {
    size = X_PACKET_128_SIZE;
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
 8000b04:	e00e      	b.n	8000b24 <xmodem_handle_packet+0x54>
  }
  else if (X_STX == header)
 8000b06:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000b0a:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d104      	bne.n	8000b1e <xmodem_handle_packet+0x4e>
  {
    size = X_PACKET_1024_SIZE;
 8000b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b18:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
 8000b1c:	e002      	b.n	8000b24 <xmodem_handle_packet+0x54>
  }
  else
  {
    /* Wrong header type. This shoudn't be possible... */
    status |= X_ERROR;
 8000b1e:	23ff      	movs	r3, #255	; 0xff
 8000b20:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  }

  uart_status comm_status = UART_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  /* Get the packet number, data and CRC from UART. */
  comm_status |= uart_receive(&received_packet_number[0u], X_PACKET_NUMBER_SIZE);
 8000b2a:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fe9b 	bl	800086c <uart_receive>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  comm_status |= uart_receive(&received_packet_data[0u], size);
 8000b44:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fe8c 	bl	800086c <uart_receive>
 8000b54:	4603      	mov	r3, r0
 8000b56:	461a      	mov	r2, r3
 8000b58:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  comm_status |= uart_receive(&received_packet_crc[0u], X_PACKET_CRC_SIZE);
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2102      	movs	r1, #2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fe7f 	bl	800086c <uart_receive>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000b76:	4313      	orrs	r3, r2
 8000b78:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  /* Merge the two bytes of CRC. */
  uint16_t crc_received = ((uint16_t)received_packet_crc[X_PACKET_CRC_HIGH_INDEX] << 8u) | ((uint16_t)received_packet_crc[X_PACKET_CRC_LOW_INDEX]);
 8000b7c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000b80:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	021b      	lsls	r3, r3, #8
 8000b88:	b21a      	sxth	r2, r3
 8000b8a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000b8e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8000b92:	785b      	ldrb	r3, [r3, #1]
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	f8a7 3410 	strh.w	r3, [r7, #1040]	; 0x410
  /* We calculate it too. */
  uint16_t crc_calculated = xmodem_calc_crc(&received_packet_data[0u], size);
 8000b9e:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff57 	bl	8000a5c <xmodem_calc_crc>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e

  /* Communication error. */
  if (UART_OK != comm_status)
 8000bb4:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <xmodem_handle_packet+0xf8>
  {
    status |= X_ERROR_UART;
 8000bbc:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  }

  /* If it is the first packet, then erase the memory. */
  if ((X_OK == status) && (false == x_first_packet_received))
 8000bc8:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d113      	bne.n	8000bf8 <xmodem_handle_packet+0x128>
 8000bd0:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <xmodem_handle_packet+0x1e0>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10f      	bne.n	8000bf8 <xmodem_handle_packet+0x128>
  {
    if (FLASH_OK == flash_erase(FLASH_APP_START_ADDRESS))
 8000bd8:	4836      	ldr	r0, [pc, #216]	; (8000cb4 <xmodem_handle_packet+0x1e4>)
 8000bda:	f7ff fc73 	bl	80004c4 <flash_erase>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d103      	bne.n	8000bec <xmodem_handle_packet+0x11c>
    {
      x_first_packet_received = true;
 8000be4:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <xmodem_handle_packet+0x1e0>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e005      	b.n	8000bf8 <xmodem_handle_packet+0x128>
    }
    else
    {
      status |= X_ERROR_FLASH;
 8000bec:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000bf0:	f043 0308 	orr.w	r3, r3, #8
 8000bf4:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
  }

  /* Error handling and flashing. */
  if (X_OK == status)
 8000bf8:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d125      	bne.n	8000c4c <xmodem_handle_packet+0x17c>
  {
    if (xmodem_packet_number != received_packet_number[0u])
 8000c00:	f897 240c 	ldrb.w	r2, [r7, #1036]	; 0x40c
 8000c04:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <xmodem_handle_packet+0x1e8>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d005      	beq.n	8000c18 <xmodem_handle_packet+0x148>
    {
      /* Packet number counter mismatch. */
      status |= X_ERROR_NUMBER;
 8000c0c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
    if (255u != (received_packet_number[X_PACKET_NUMBER_INDEX] + received_packet_number[X_PACKET_NUMBER_COMPLEMENT_INDEX]))
 8000c18:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 8000c22:	4413      	add	r3, r2
 8000c24:	2bff      	cmp	r3, #255	; 0xff
 8000c26:	d005      	beq.n	8000c34 <xmodem_handle_packet+0x164>
    {
      /* The sum of the packet number and packet number complement aren't 255. */
      /* The sum always has to be 255. */
      status |= X_ERROR_NUMBER;
 8000c28:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
    if (crc_calculated != crc_received)
 8000c34:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8000c38:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	; 0x410
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d005      	beq.n	8000c4c <xmodem_handle_packet+0x17c>
    {
      /* The calculated and received CRC are different. */
      status |= X_ERROR_CRC;
 8000c40:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
  }

    /* Do the actual flashing (if there weren't any errors). */
    if ((X_OK == status) && (FLASH_OK != flash_write(xmodem_actual_flash_address, (uint32_t*)&received_packet_data[0u], (uint32_t)size/4u)))
 8000c4c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d114      	bne.n	8000c7e <xmodem_handle_packet+0x1ae>
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <xmodem_handle_packet+0x1ec>)
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	; 0x414
 8000c5c:	089b      	lsrs	r3, r3, #2
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	4619      	mov	r1, r3
 8000c68:	f7ff fc57 	bl	800051a <flash_write>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <xmodem_handle_packet+0x1ae>
    {
      /* Flashing error. */
      status |= X_ERROR_FLASH;
 8000c72:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

  /* Raise the packet number and the address counters (if there weren't any errors). */
  if (X_OK == status)
 8000c7e:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10c      	bne.n	8000ca0 <xmodem_handle_packet+0x1d0>
  {
    xmodem_packet_number++;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <xmodem_handle_packet+0x1e8>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <xmodem_handle_packet+0x1e8>)
 8000c90:	701a      	strb	r2, [r3, #0]
    xmodem_actual_flash_address += size;
 8000c92:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <xmodem_handle_packet+0x1ec>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <xmodem_handle_packet+0x1ec>)
 8000c9e:	6013      	str	r3, [r2, #0]
  }

  return status;
 8000ca0:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000078 	.word	0x20000078
 8000cb4:	08008000 	.word	0x08008000
 8000cb8:	20000004 	.word	0x20000004
 8000cbc:	20000074 	.word	0x20000074

08000cc0 <xmodem_error_handler>:
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
  xmodem_status status = X_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
  /* Raise the error counter. */
  (*error_number)++;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	701a      	strb	r2, [r3, #0]
  /* If the counter reached the max value, then abort. */
  if ((*error_number) >= max_error_number)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	78fa      	ldrb	r2, [r7, #3]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d808      	bhi.n	8000cf8 <xmodem_error_handler+0x38>
  {
    /* Graceful abort. */
    (void)uart_transmit_ch(X_CAN);
 8000ce6:	2018      	movs	r0, #24
 8000ce8:	f7ff fe02 	bl	80008f0 <uart_transmit_ch>
    (void)uart_transmit_ch(X_CAN);
 8000cec:	2018      	movs	r0, #24
 8000cee:	f7ff fdff 	bl	80008f0 <uart_transmit_ch>
    status = X_ERROR;
 8000cf2:	23ff      	movs	r3, #255	; 0xff
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	e004      	b.n	8000d02 <xmodem_error_handler+0x42>
  }
  /* Otherwise send a NAK for a repeat. */
  else
  {
    (void)uart_transmit_ch(X_NAK);
 8000cf8:	2015      	movs	r0, #21
 8000cfa:	f7ff fdf9 	bl	80008f0 <uart_transmit_ch>
    status = X_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000d10:	f7ff fda5 	bl	800085e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	; (8000d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	; (8000d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f001 fea9 	bl	8002a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f7ff fc49 	bl	80005d4 <main>
  bx  lr    
 8000d42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d50:	08002c4c 	.word	0x08002c4c
  ldr r2, =_sbss
 8000d54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d58:	200000a0 	.word	0x200000a0

08000d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <HAL_Init+0x40>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_Init+0x40>)
 8000d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_Init+0x40>)
 8000d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f939 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f000 f83a 	bl	8000e08 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fcce 	bl	8000734 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_DeInit+0x54>)
 8000daa:	f04f 32ff 	mov.w	r2, #4294967295
 8000dae:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_DeInit+0x54>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <HAL_DeInit+0x54>)
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_DeInit+0x54>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_DeInit+0x54>)
 8000dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dca:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_DeInit+0x54>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_DeInit+0x54>)
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_DeInit+0x54>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_DeInit+0x54>)
 8000de2:	f04f 32ff 	mov.w	r2, #4294967295
 8000de6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_DeInit+0x54>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000dee:	f000 f805 	bl	8000dfc <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x54>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f911 	bl	800104e <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f8e7 	bl	8001016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_InitTick+0x5c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	2000000c 	.word	0x2000000c
 8000e64:	20000008 	.word	0x20000008

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_IncTick+0x1c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_IncTick+0x20>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a03      	ldr	r2, [pc, #12]	; (8000e88 <HAL_IncTick+0x20>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	2000007c 	.word	0x2000007c

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <HAL_GetTick+0x10>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	2000007c 	.word	0x2000007c

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f7ff ff90 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff49 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff5e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff90 	bl	8000f58 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5f 	bl	8000f04 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffb0 	bl	8000fbc <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ff0a 	bl	8000e8c <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d008      	beq.n	8001098 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e052      	b.n	800113e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0216 	bic.w	r2, r2, #22
 80010a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	695a      	ldr	r2, [r3, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d103      	bne.n	80010c8 <HAL_DMA_Abort+0x62>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d007      	beq.n	80010d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0208 	bic.w	r2, r2, #8
 80010d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e8:	e013      	b.n	8001112 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ea:	f7ff fecf 	bl	8000e8c <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d90c      	bls.n	8001112 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2220      	movs	r2, #32
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2203      	movs	r2, #3
 8001102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e015      	b.n	800113e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1e4      	bne.n	80010ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001124:	223f      	movs	r2, #63	; 0x3f
 8001126:	409a      	lsls	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <HAL_FLASH_Program+0xa0>)
 8001170:	7e1b      	ldrb	r3, [r3, #24]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d101      	bne.n	800117a <HAL_FLASH_Program+0x1e>
 8001176:	2302      	movs	r3, #2
 8001178:	e03b      	b.n	80011f2 <HAL_FLASH_Program+0x96>
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_FLASH_Program+0xa0>)
 800117c:	2201      	movs	r2, #1
 800117e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001180:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001184:	f000 f870 	bl	8001268 <FLASH_WaitForLastOperation>
 8001188:	4603      	mov	r3, r0
 800118a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d12b      	bne.n	80011ea <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001198:	783b      	ldrb	r3, [r7, #0]
 800119a:	4619      	mov	r1, r3
 800119c:	68b8      	ldr	r0, [r7, #8]
 800119e:	f000 f919 	bl	80013d4 <FLASH_Program_Byte>
 80011a2:	e016      	b.n	80011d2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d105      	bne.n	80011b6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80011aa:	883b      	ldrh	r3, [r7, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	68b8      	ldr	r0, [r7, #8]
 80011b0:	f000 f8ee 	bl	8001390 <FLASH_Program_HalfWord>
 80011b4:	e00d      	b.n	80011d2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d105      	bne.n	80011c8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	4619      	mov	r1, r3
 80011c0:	68b8      	ldr	r0, [r7, #8]
 80011c2:	f000 f8c3 	bl	800134c <FLASH_Program_Word>
 80011c6:	e004      	b.n	80011d2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80011c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	f000 f88b 	bl	80012e8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011d6:	f000 f847 	bl	8001268 <FLASH_WaitForLastOperation>
 80011da:	4603      	mov	r3, r0
 80011dc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_FLASH_Program+0xa4>)
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_FLASH_Program+0xa4>)
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_FLASH_Program+0xa0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	761a      	strb	r2, [r3, #24]
  
  return status;
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000080 	.word	0x20000080
 8001200:	40023c00 	.word	0x40023c00

08001204 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_FLASH_Unlock+0x38>)
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	da0b      	bge.n	800122e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_FLASH_Unlock+0x38>)
 8001218:	4a09      	ldr	r2, [pc, #36]	; (8001240 <HAL_FLASH_Unlock+0x3c>)
 800121a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <HAL_FLASH_Unlock+0x38>)
 800121e:	4a09      	ldr	r2, [pc, #36]	; (8001244 <HAL_FLASH_Unlock+0x40>)
 8001220:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_FLASH_Unlock+0x38>)
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	2b00      	cmp	r3, #0
 8001228:	da01      	bge.n	800122e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800122e:	79fb      	ldrb	r3, [r7, #7]
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023c00 	.word	0x40023c00
 8001240:	45670123 	.word	0x45670123
 8001244:	cdef89ab 	.word	0xcdef89ab

08001248 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_FLASH_Lock+0x1c>)
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_FLASH_Lock+0x1c>)
 8001252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001256:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023c00 	.word	0x40023c00

08001268 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <FLASH_WaitForLastOperation+0x78>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800127a:	f7ff fe07 	bl	8000e8c <HAL_GetTick>
 800127e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001280:	e010      	b.n	80012a4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d00c      	beq.n	80012a4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d007      	beq.n	80012a0 <FLASH_WaitForLastOperation+0x38>
 8001290:	f7ff fdfc 	bl	8000e8c <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	429a      	cmp	r2, r3
 800129e:	d201      	bcs.n	80012a4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e019      	b.n	80012d8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <FLASH_WaitForLastOperation+0x7c>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1e8      	bne.n	8001282 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <FLASH_WaitForLastOperation+0x7c>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <FLASH_WaitForLastOperation+0x7c>)
 80012be:	2201      	movs	r2, #1
 80012c0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <FLASH_WaitForLastOperation+0x7c>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012ce:	f000 f8a1 	bl	8001414 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
  
}  
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000080 	.word	0x20000080
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <FLASH_Program_DoubleWord+0x60>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	4a13      	ldr	r2, [pc, #76]	; (8001348 <FLASH_Program_DoubleWord+0x60>)
 80012fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <FLASH_Program_DoubleWord+0x60>)
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	4a10      	ldr	r2, [pc, #64]	; (8001348 <FLASH_Program_DoubleWord+0x60>)
 8001306:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800130a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <FLASH_Program_DoubleWord+0x60>)
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <FLASH_Program_DoubleWord+0x60>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800131e:	f3bf 8f6f 	isb	sy
}
 8001322:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001324:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	000a      	movs	r2, r1
 8001332:	2300      	movs	r3, #0
 8001334:	68f9      	ldr	r1, [r7, #12]
 8001336:	3104      	adds	r1, #4
 8001338:	4613      	mov	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023c00 	.word	0x40023c00

0800134c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <FLASH_Program_Word+0x40>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4a0c      	ldr	r2, [pc, #48]	; (800138c <FLASH_Program_Word+0x40>)
 800135c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001360:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <FLASH_Program_Word+0x40>)
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <FLASH_Program_Word+0x40>)
 8001368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <FLASH_Program_Word+0x40>)
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	4a06      	ldr	r2, [pc, #24]	; (800138c <FLASH_Program_Word+0x40>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	601a      	str	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023c00 	.word	0x40023c00

08001390 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <FLASH_Program_HalfWord+0x40>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <FLASH_Program_HalfWord+0x40>)
 80013a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <FLASH_Program_HalfWord+0x40>)
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <FLASH_Program_HalfWord+0x40>)
 80013ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <FLASH_Program_HalfWord+0x40>)
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <FLASH_Program_HalfWord+0x40>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	801a      	strh	r2, [r3, #0]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <FLASH_Program_Byte+0x3c>)
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <FLASH_Program_Byte+0x3c>)
 80013e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <FLASH_Program_Byte+0x3c>)
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <FLASH_Program_Byte+0x3c>)
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <FLASH_Program_Byte+0x3c>)
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	4a05      	ldr	r2, [pc, #20]	; (8001410 <FLASH_Program_Byte+0x3c>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	78fa      	ldrb	r2, [r7, #3]
 8001404:	701a      	strb	r2, [r3, #0]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	40023c00 	.word	0x40023c00

08001414 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001418:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <FLASH_SetErrorCode+0xa4>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	2b00      	cmp	r3, #0
 8001422:	d008      	beq.n	8001436 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <FLASH_SetErrorCode+0xa8>)
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	4a23      	ldr	r2, [pc, #140]	; (80014bc <FLASH_SetErrorCode+0xa8>)
 800142e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <FLASH_SetErrorCode+0xa4>)
 8001432:	2210      	movs	r2, #16
 8001434:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <FLASH_SetErrorCode+0xa4>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f003 0320 	and.w	r3, r3, #32
 800143e:	2b00      	cmp	r3, #0
 8001440:	d008      	beq.n	8001454 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <FLASH_SetErrorCode+0xa8>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <FLASH_SetErrorCode+0xa8>)
 800144c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <FLASH_SetErrorCode+0xa4>)
 8001450:	2220      	movs	r2, #32
 8001452:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <FLASH_SetErrorCode+0xa4>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <FLASH_SetErrorCode+0xa8>)
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <FLASH_SetErrorCode+0xa8>)
 800146a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <FLASH_SetErrorCode+0xa4>)
 800146e:	2240      	movs	r2, #64	; 0x40
 8001470:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <FLASH_SetErrorCode+0xa4>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	2b00      	cmp	r3, #0
 800147c:	d008      	beq.n	8001490 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <FLASH_SetErrorCode+0xa8>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <FLASH_SetErrorCode+0xa8>)
 8001488:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <FLASH_SetErrorCode+0xa4>)
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <FLASH_SetErrorCode+0xa4>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <FLASH_SetErrorCode+0xa8>)
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	4a05      	ldr	r2, [pc, #20]	; (80014bc <FLASH_SetErrorCode+0xa8>)
 80014a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <FLASH_SetErrorCode+0xa4>)
 80014aa:	2202      	movs	r2, #2
 80014ac:	60da      	str	r2, [r3, #12]
  }
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023c00 	.word	0x40023c00
 80014bc:	20000080 	.word	0x20000080

080014c0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014d2:	4b31      	ldr	r3, [pc, #196]	; (8001598 <HAL_FLASHEx_Erase+0xd8>)
 80014d4:	7e1b      	ldrb	r3, [r3, #24]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <HAL_FLASHEx_Erase+0x1e>
 80014da:	2302      	movs	r3, #2
 80014dc:	e058      	b.n	8001590 <HAL_FLASHEx_Erase+0xd0>
 80014de:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <HAL_FLASHEx_Erase+0xd8>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014e8:	f7ff febe 	bl	8001268 <FLASH_WaitForLastOperation>
 80014ec:	4603      	mov	r3, r0
 80014ee:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d148      	bne.n	8001588 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d115      	bne.n	8001532 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4619      	mov	r1, r3
 8001512:	4610      	mov	r0, r2
 8001514:	f000 f8da 	bl	80016cc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001518:	f24c 3050 	movw	r0, #50000	; 0xc350
 800151c:	f7ff fea4 	bl	8001268 <FLASH_WaitForLastOperation>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_FLASHEx_Erase+0xdc>)
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	4a1c      	ldr	r2, [pc, #112]	; (800159c <HAL_FLASHEx_Erase+0xdc>)
 800152a:	f023 0304 	bic.w	r3, r3, #4
 800152e:	6113      	str	r3, [r2, #16]
 8001530:	e028      	b.n	8001584 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	e01c      	b.n	8001574 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	68b8      	ldr	r0, [r7, #8]
 8001544:	f000 f82c 	bl	80015a0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001548:	f24c 3050 	movw	r0, #50000	; 0xc350
 800154c:	f7ff fe8c 	bl	8001268 <FLASH_WaitForLastOperation>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_FLASHEx_Erase+0xdc>)
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	4a10      	ldr	r2, [pc, #64]	; (800159c <HAL_FLASHEx_Erase+0xdc>)
 800155a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800155e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	601a      	str	r2, [r3, #0]
          break;
 800156c:	e00a      	b.n	8001584 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3301      	adds	r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	4413      	add	r3, r2
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	429a      	cmp	r2, r3
 8001582:	d3da      	bcc.n	800153a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001584:	f000 f85e 	bl	8001644 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_FLASHEx_Erase+0xd8>)
 800158a:	2200      	movs	r2, #0
 800158c:	761a      	strb	r2, [r3, #24]

  return status;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000080 	.word	0x20000080
 800159c:	40023c00 	.word	0x40023c00

080015a0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e010      	b.n	80015de <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d103      	bne.n	80015ca <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80015c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e009      	b.n	80015de <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d103      	bne.n	80015d8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80015d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e002      	b.n	80015de <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80015d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015dc:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <FLASH_Erase_Sector+0xa0>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <FLASH_Erase_Sector+0xa0>)
 80015e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <FLASH_Erase_Sector+0xa0>)
 80015ec:	691a      	ldr	r2, [r3, #16]
 80015ee:	4914      	ldr	r1, [pc, #80]	; (8001640 <FLASH_Erase_Sector+0xa0>)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <FLASH_Erase_Sector+0xa0>)
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	4a11      	ldr	r2, [pc, #68]	; (8001640 <FLASH_Erase_Sector+0xa0>)
 80015fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001600:	6113      	str	r3, [r2, #16]
 8001602:	23f8      	movs	r3, #248	; 0xf8
 8001604:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800160e:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4093      	lsls	r3, r2
 800161c:	f043 0202 	orr.w	r2, r3, #2
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <FLASH_Erase_Sector+0xa0>)
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	4906      	ldr	r1, [pc, #24]	; (8001640 <FLASH_Erase_Sector+0xa0>)
 8001626:	4313      	orrs	r3, r2
 8001628:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <FLASH_Erase_Sector+0xa0>)
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <FLASH_Erase_Sector+0xa0>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6113      	str	r3, [r2, #16]
}
 8001636:	bf00      	nop
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	40023c00 	.word	0x40023c00

08001644 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <FLASH_FlushCaches+0x84>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001650:	2b00      	cmp	r3, #0
 8001652:	d017      	beq.n	8001684 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <FLASH_FlushCaches+0x84>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <FLASH_FlushCaches+0x84>)
 800165a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800165e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <FLASH_FlushCaches+0x84>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <FLASH_FlushCaches+0x84>)
 8001666:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <FLASH_FlushCaches+0x84>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <FLASH_FlushCaches+0x84>)
 8001672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001676:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <FLASH_FlushCaches+0x84>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <FLASH_FlushCaches+0x84>)
 800167e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001682:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <FLASH_FlushCaches+0x84>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168c:	2b00      	cmp	r3, #0
 800168e:	d017      	beq.n	80016c0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <FLASH_FlushCaches+0x84>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <FLASH_FlushCaches+0x84>)
 8001696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800169a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <FLASH_FlushCaches+0x84>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <FLASH_FlushCaches+0x84>)
 80016a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <FLASH_FlushCaches+0x84>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <FLASH_FlushCaches+0x84>)
 80016ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016b2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <FLASH_FlushCaches+0x84>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a03      	ldr	r2, [pc, #12]	; (80016c8 <FLASH_FlushCaches+0x84>)
 80016ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016be:	6013      	str	r3, [r2, #0]
  }
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	40023c00 	.word	0x40023c00

080016cc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{ 
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <FLASH_MassErase+0x40>)
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	4a0b      	ldr	r2, [pc, #44]	; (800170c <FLASH_MassErase+0x40>)
 80016de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <FLASH_MassErase+0x40>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	4a08      	ldr	r2, [pc, #32]	; (800170c <FLASH_MassErase+0x40>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <FLASH_MassErase+0x40>)
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	4313      	orrs	r3, r2
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <FLASH_MassErase+0x40>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001700:	6113      	str	r3, [r2, #16]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40023c00 	.word	0x40023c00

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	e16f      	b.n	8001a00 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8161 	beq.w	80019fa <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d005      	beq.n	8001750 <HAL_GPIO_Init+0x40>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d130      	bne.n	80017b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001786:	2201      	movs	r2, #1
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	f003 0201 	and.w	r2, r3, #1
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d017      	beq.n	80017ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d123      	bne.n	8001842 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	08da      	lsrs	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3208      	adds	r2, #8
 800183c:	6939      	ldr	r1, [r7, #16]
 800183e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	2203      	movs	r2, #3
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0203 	and.w	r2, r3, #3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 80bb 	beq.w	80019fa <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	4b64      	ldr	r3, [pc, #400]	; (8001a1c <HAL_GPIO_Init+0x30c>)
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188c:	4a63      	ldr	r2, [pc, #396]	; (8001a1c <HAL_GPIO_Init+0x30c>)
 800188e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001892:	6453      	str	r3, [r2, #68]	; 0x44
 8001894:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <HAL_GPIO_Init+0x30c>)
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018a0:	4a5f      	ldr	r2, [pc, #380]	; (8001a20 <HAL_GPIO_Init+0x310>)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a57      	ldr	r2, [pc, #348]	; (8001a24 <HAL_GPIO_Init+0x314>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d031      	beq.n	8001930 <HAL_GPIO_Init+0x220>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a56      	ldr	r2, [pc, #344]	; (8001a28 <HAL_GPIO_Init+0x318>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d02b      	beq.n	800192c <HAL_GPIO_Init+0x21c>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a55      	ldr	r2, [pc, #340]	; (8001a2c <HAL_GPIO_Init+0x31c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d025      	beq.n	8001928 <HAL_GPIO_Init+0x218>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a54      	ldr	r2, [pc, #336]	; (8001a30 <HAL_GPIO_Init+0x320>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d01f      	beq.n	8001924 <HAL_GPIO_Init+0x214>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a53      	ldr	r2, [pc, #332]	; (8001a34 <HAL_GPIO_Init+0x324>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d019      	beq.n	8001920 <HAL_GPIO_Init+0x210>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_GPIO_Init+0x328>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d013      	beq.n	800191c <HAL_GPIO_Init+0x20c>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a51      	ldr	r2, [pc, #324]	; (8001a3c <HAL_GPIO_Init+0x32c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00d      	beq.n	8001918 <HAL_GPIO_Init+0x208>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a50      	ldr	r2, [pc, #320]	; (8001a40 <HAL_GPIO_Init+0x330>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d007      	beq.n	8001914 <HAL_GPIO_Init+0x204>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a4f      	ldr	r2, [pc, #316]	; (8001a44 <HAL_GPIO_Init+0x334>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d101      	bne.n	8001910 <HAL_GPIO_Init+0x200>
 800190c:	2308      	movs	r3, #8
 800190e:	e010      	b.n	8001932 <HAL_GPIO_Init+0x222>
 8001910:	2309      	movs	r3, #9
 8001912:	e00e      	b.n	8001932 <HAL_GPIO_Init+0x222>
 8001914:	2307      	movs	r3, #7
 8001916:	e00c      	b.n	8001932 <HAL_GPIO_Init+0x222>
 8001918:	2306      	movs	r3, #6
 800191a:	e00a      	b.n	8001932 <HAL_GPIO_Init+0x222>
 800191c:	2305      	movs	r3, #5
 800191e:	e008      	b.n	8001932 <HAL_GPIO_Init+0x222>
 8001920:	2304      	movs	r3, #4
 8001922:	e006      	b.n	8001932 <HAL_GPIO_Init+0x222>
 8001924:	2303      	movs	r3, #3
 8001926:	e004      	b.n	8001932 <HAL_GPIO_Init+0x222>
 8001928:	2302      	movs	r3, #2
 800192a:	e002      	b.n	8001932 <HAL_GPIO_Init+0x222>
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_GPIO_Init+0x222>
 8001930:	2300      	movs	r3, #0
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	f002 0203 	and.w	r2, r2, #3
 8001938:	0092      	lsls	r2, r2, #2
 800193a:	4093      	lsls	r3, r2
 800193c:	461a      	mov	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001944:	4936      	ldr	r1, [pc, #216]	; (8001a20 <HAL_GPIO_Init+0x310>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <HAL_GPIO_Init+0x338>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001976:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <HAL_GPIO_Init+0x338>)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800197c:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <HAL_GPIO_Init+0x338>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019a0:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <HAL_GPIO_Init+0x338>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <HAL_GPIO_Init+0x338>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019ca:	4a1f      	ldr	r2, [pc, #124]	; (8001a48 <HAL_GPIO_Init+0x338>)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_GPIO_Init+0x338>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_GPIO_Init+0x338>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f47f ae88 	bne.w	8001720 <HAL_GPIO_Init+0x10>
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40013800 	.word	0x40013800
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020c00 	.word	0x40020c00
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40021400 	.word	0x40021400
 8001a3c:	40021800 	.word	0x40021800
 8001a40:	40021c00 	.word	0x40021c00
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40013c00 	.word	0x40013c00

08001a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e23b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d050      	beq.n	8001b0c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a6a:	4b9e      	ldr	r3, [pc, #632]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d00c      	beq.n	8001a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a76:	4b9b      	ldr	r3, [pc, #620]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d112      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a82:	4b98      	ldr	r3, [pc, #608]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a8e:	d10b      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	4b94      	ldr	r3, [pc, #592]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d036      	beq.n	8001b0a <HAL_RCC_OscConfig+0xbe>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d132      	bne.n	8001b0a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e216      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4b8e      	ldr	r3, [pc, #568]	; (8001ce8 <HAL_RCC_OscConfig+0x29c>)
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d013      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff f9e7 	bl	8000e8c <HAL_GetTick>
 8001abe:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac2:	f7ff f9e3 	bl	8000e8c <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b64      	cmp	r3, #100	; 0x64
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e200      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad4:	4b83      	ldr	r3, [pc, #524]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x76>
 8001ae0:	e014      	b.n	8001b0c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f9d3 	bl	8000e8c <HAL_GetTick>
 8001ae6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aea:	f7ff f9cf 	bl	8000e8c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b64      	cmp	r3, #100	; 0x64
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1ec      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afc:	4b79      	ldr	r3, [pc, #484]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x9e>
 8001b08:	e000      	b.n	8001b0c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d077      	beq.n	8001c08 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b18:	4b72      	ldr	r3, [pc, #456]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00b      	beq.n	8001b3c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b24:	4b6f      	ldr	r3, [pc, #444]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d126      	bne.n	8001b7e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b30:	4b6c      	ldr	r3, [pc, #432]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d120      	bne.n	8001b7e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3c:	4b69      	ldr	r3, [pc, #420]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_OscConfig+0x108>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e1c0      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b54:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	21f8      	movs	r1, #248	; 0xf8
 8001b62:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	69b9      	ldr	r1, [r7, #24]
 8001b66:	fa91 f1a1 	rbit	r1, r1
 8001b6a:	6179      	str	r1, [r7, #20]
  return result;
 8001b6c:	6979      	ldr	r1, [r7, #20]
 8001b6e:	fab1 f181 	clz	r1, r1
 8001b72:	b2c9      	uxtb	r1, r1
 8001b74:	408b      	lsls	r3, r1
 8001b76:	495b      	ldr	r1, [pc, #364]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7c:	e044      	b.n	8001c08 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d02a      	beq.n	8001bdc <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b86:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_OscConfig+0x2a0>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f97e 	bl	8000e8c <HAL_GetTick>
 8001b90:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b94:	f7ff f97a 	bl	8000e8c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e197      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba6:	4b4f      	ldr	r3, [pc, #316]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb2:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	21f8      	movs	r1, #248	; 0xf8
 8001bc0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	6939      	ldr	r1, [r7, #16]
 8001bc4:	fa91 f1a1 	rbit	r1, r1
 8001bc8:	60f9      	str	r1, [r7, #12]
  return result;
 8001bca:	68f9      	ldr	r1, [r7, #12]
 8001bcc:	fab1 f181 	clz	r1, r1
 8001bd0:	b2c9      	uxtb	r1, r1
 8001bd2:	408b      	lsls	r3, r1
 8001bd4:	4943      	ldr	r1, [pc, #268]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
 8001bda:	e015      	b.n	8001c08 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bdc:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_RCC_OscConfig+0x2a0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7ff f953 	bl	8000e8c <HAL_GetTick>
 8001be6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bea:	f7ff f94f 	bl	8000e8c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e16c      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d030      	beq.n	8001c76 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d016      	beq.n	8001c4a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1c:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <HAL_RCC_OscConfig+0x2a4>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c22:	f7ff f933 	bl	8000e8c <HAL_GetTick>
 8001c26:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f92f 	bl	8000e8c <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e14c      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1de>
 8001c48:	e015      	b.n	8001c76 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_RCC_OscConfig+0x2a4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7ff f91c 	bl	8000e8c <HAL_GetTick>
 8001c54:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff f918 	bl	8000e8c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e135      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8087 	beq.w	8001d92 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d110      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_RCC_OscConfig+0x298>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_RCC_OscConfig+0x2a8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <HAL_RCC_OscConfig+0x2a8>)
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_OscConfig+0x2a8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d122      	bne.n	8001d16 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_RCC_OscConfig+0x2a8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_RCC_OscConfig+0x2a8>)
 8001cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cdc:	f7ff f8d6 	bl	8000e8c <HAL_GetTick>
 8001ce0:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	e012      	b.n	8001d0a <HAL_RCC_OscConfig+0x2be>
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40023802 	.word	0x40023802
 8001cec:	42470000 	.word	0x42470000
 8001cf0:	42470e80 	.word	0x42470e80
 8001cf4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf8:	f7ff f8c8 	bl	8000e8c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0e5      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	4b75      	ldr	r3, [pc, #468]	; (8001ee0 <HAL_RCC_OscConfig+0x494>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	4b72      	ldr	r3, [pc, #456]	; (8001ee4 <HAL_RCC_OscConfig+0x498>)
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d015      	beq.n	8001d54 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7ff f8b0 	bl	8000e8c <HAL_GetTick>
 8001d2c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7ff f8ac 	bl	8000e8c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e0c7      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d46:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <HAL_RCC_OscConfig+0x49c>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0ee      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2e4>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff f89a 	bl	8000e8c <HAL_GetTick>
 8001d58:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7ff f896 	bl	8000e8c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e0b1      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d72:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <HAL_RCC_OscConfig+0x49c>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ee      	bne.n	8001d5c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d86:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <HAL_RCC_OscConfig+0x49c>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <HAL_RCC_OscConfig+0x49c>)
 8001d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 809c 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d9c:	4b52      	ldr	r3, [pc, #328]	; (8001ee8 <HAL_RCC_OscConfig+0x49c>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d061      	beq.n	8001e6c <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d146      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db0:	4b4e      	ldr	r3, [pc, #312]	; (8001eec <HAL_RCC_OscConfig+0x4a0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff f869 	bl	8000e8c <HAL_GetTick>
 8001dba:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7ff f865 	bl	8000e8c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b64      	cmp	r3, #100	; 0x64
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e082      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd0:	4b45      	ldr	r3, [pc, #276]	; (8001ee8 <HAL_RCC_OscConfig+0x49c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ddc:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <HAL_RCC_OscConfig+0x49c>)
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <HAL_RCC_OscConfig+0x4a4>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	69d1      	ldr	r1, [r2, #28]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6a12      	ldr	r2, [r2, #32]
 8001dec:	4311      	orrs	r1, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001df2:	0192      	lsls	r2, r2, #6
 8001df4:	4311      	orrs	r1, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dfa:	0612      	lsls	r2, r2, #24
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e02:	0852      	lsrs	r2, r2, #1
 8001e04:	3a01      	subs	r2, #1
 8001e06:	0412      	lsls	r2, r2, #16
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	4937      	ldr	r1, [pc, #220]	; (8001ee8 <HAL_RCC_OscConfig+0x49c>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e10:	4b36      	ldr	r3, [pc, #216]	; (8001eec <HAL_RCC_OscConfig+0x4a0>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff f839 	bl	8000e8c <HAL_GetTick>
 8001e1a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7ff f835 	bl	8000e8c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e052      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_RCC_OscConfig+0x49c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x3d2>
 8001e3c:	e04a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_RCC_OscConfig+0x4a0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff f822 	bl	8000e8c <HAL_GetTick>
 8001e48:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff f81e 	bl	8000e8c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e03b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <HAL_RCC_OscConfig+0x49c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x400>
 8001e6a:	e033      	b.n	8001ed4 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e02e      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_RCC_OscConfig+0x49c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d121      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d11a      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ea6:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d111      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	40023870 	.word	0x40023870
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	42470060 	.word	0x42470060
 8001ef0:	f0bc8000 	.word	0xf0bc8000

08001ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0d2      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f08:	4b6b      	ldr	r3, [pc, #428]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d90c      	bls.n	8001f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b68      	ldr	r3, [pc, #416]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0be      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f48:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4a5b      	ldr	r2, [pc, #364]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001f60:	4b56      	ldr	r3, [pc, #344]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4a55      	ldr	r2, [pc, #340]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4950      	ldr	r1, [pc, #320]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d040      	beq.n	800200c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d115      	bne.n	8001fca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e085      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	4b44      	ldr	r3, [pc, #272]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e079      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fba:	4b40      	ldr	r3, [pc, #256]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e071      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b3c      	ldr	r3, [pc, #240]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4939      	ldr	r1, [pc, #228]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7fe ff56 	bl	8000e8c <HAL_GetTick>
 8001fe0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7fe ff52 	bl	8000e8c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e059      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d20c      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e03c      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	491b      	ldr	r1, [pc, #108]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4913      	ldr	r1, [pc, #76]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002072:	f000 f82b 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8002076:	4601      	mov	r1, r0
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002080:	22f0      	movs	r2, #240	; 0xf0
 8002082:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	fa92 f2a2 	rbit	r2, r2
 800208a:	60fa      	str	r2, [r7, #12]
  return result;
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	fab2 f282 	clz	r2, r2
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	40d3      	lsrs	r3, r2
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <HAL_RCC_ClockConfig+0x1cc>)
 8002098:	5cd3      	ldrb	r3, [r2, r3]
 800209a:	fa21 f303 	lsr.w	r3, r1, r3
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x1d0>)
 80020a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1d4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe feae 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023c00 	.word	0x40023c00
 80020bc:	40023800 	.word	0x40023800
 80020c0:	08002c24 	.word	0x08002c24
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000008 	.word	0x20000008

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020d0:	b090      	sub	sp, #64	; 0x40
 80020d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
 80020d8:	2300      	movs	r3, #0
 80020da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020dc:	2300      	movs	r3, #0
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020e4:	4b59      	ldr	r3, [pc, #356]	; (800224c <HAL_RCC_GetSysClockFreq+0x180>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d00d      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x40>
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	f200 80a2 	bhi.w	800223a <HAL_RCC_GetSysClockFreq+0x16e>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x34>
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0x3a>
 80020fe:	e09c      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_RCC_GetSysClockFreq+0x184>)
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002104:	e09c      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002106:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCC_GetSysClockFreq+0x188>)
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800210a:	e099      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800210c:	4b4f      	ldr	r3, [pc, #316]	; (800224c <HAL_RCC_GetSysClockFreq+0x180>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002116:	4b4d      	ldr	r3, [pc, #308]	; (800224c <HAL_RCC_GetSysClockFreq+0x180>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d027      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002122:	4b4a      	ldr	r3, [pc, #296]	; (800224c <HAL_RCC_GetSysClockFreq+0x180>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	2200      	movs	r2, #0
 800212a:	623b      	str	r3, [r7, #32]
 800212c:	627a      	str	r2, [r7, #36]	; 0x24
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002134:	2100      	movs	r1, #0
 8002136:	4b47      	ldr	r3, [pc, #284]	; (8002254 <HAL_RCC_GetSysClockFreq+0x188>)
 8002138:	fb03 f201 	mul.w	r2, r3, r1
 800213c:	2300      	movs	r3, #0
 800213e:	fb00 f303 	mul.w	r3, r0, r3
 8002142:	4413      	add	r3, r2
 8002144:	4a43      	ldr	r2, [pc, #268]	; (8002254 <HAL_RCC_GetSysClockFreq+0x188>)
 8002146:	fba0 2102 	umull	r2, r1, r0, r2
 800214a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800214c:	62ba      	str	r2, [r7, #40]	; 0x28
 800214e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002150:	4413      	add	r3, r2
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002156:	2200      	movs	r2, #0
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	61fa      	str	r2, [r7, #28]
 800215c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002160:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002164:	f7fe f82e 	bl	80001c4 <__aeabi_uldivmod>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4613      	mov	r3, r2
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002170:	e055      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002172:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_RCC_GetSysClockFreq+0x180>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	099b      	lsrs	r3, r3, #6
 8002178:	2200      	movs	r2, #0
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	617a      	str	r2, [r7, #20]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002184:	f04f 0b00 	mov.w	fp, #0
 8002188:	4652      	mov	r2, sl
 800218a:	465b      	mov	r3, fp
 800218c:	f04f 0000 	mov.w	r0, #0
 8002190:	f04f 0100 	mov.w	r1, #0
 8002194:	0159      	lsls	r1, r3, #5
 8002196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800219a:	0150      	lsls	r0, r2, #5
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	ebb2 080a 	subs.w	r8, r2, sl
 80021a4:	eb63 090b 	sbc.w	r9, r3, fp
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021b4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021b8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021bc:	ebb2 0408 	subs.w	r4, r2, r8
 80021c0:	eb63 0509 	sbc.w	r5, r3, r9
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	00eb      	lsls	r3, r5, #3
 80021ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021d2:	00e2      	lsls	r2, r4, #3
 80021d4:	4614      	mov	r4, r2
 80021d6:	461d      	mov	r5, r3
 80021d8:	eb14 030a 	adds.w	r3, r4, sl
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	eb45 030b 	adc.w	r3, r5, fp
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021f0:	4629      	mov	r1, r5
 80021f2:	028b      	lsls	r3, r1, #10
 80021f4:	4620      	mov	r0, r4
 80021f6:	4629      	mov	r1, r5
 80021f8:	4604      	mov	r4, r0
 80021fa:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80021fe:	4601      	mov	r1, r0
 8002200:	028a      	lsls	r2, r1, #10
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002208:	2200      	movs	r2, #0
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	60fa      	str	r2, [r7, #12]
 800220e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002212:	f7fd ffd7 	bl	80001c4 <__aeabi_uldivmod>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4613      	mov	r3, r2
 800221c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_GetSysClockFreq+0x180>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	0c1b      	lsrs	r3, r3, #16
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	3301      	adds	r3, #1
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800222e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002238:	e002      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCC_GetSysClockFreq+0x184>)
 800223c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800223e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002242:	4618      	mov	r0, r3
 8002244:	3740      	adds	r7, #64	; 0x40
 8002246:	46bd      	mov	sp, r7
 8002248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	00f42400 	.word	0x00f42400
 8002254:	017d7840 	.word	0x017d7840

08002258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <HAL_RCC_GetHCLKFreq+0x10>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000000 	.word	0x20000000

0800226c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002272:	f7ff fff1 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 8002276:	4601      	mov	r1, r0
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002280:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002284:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	fa92 f2a2 	rbit	r2, r2
 800228c:	603a      	str	r2, [r7, #0]
  return result;
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	40d3      	lsrs	r3, r2
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	08002c34 	.word	0x08002c34

080022b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80022b6:	f7ff ffcf 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 80022ba:	4601      	mov	r1, r0
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80022c4:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80022c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	fa92 f2a2 	rbit	r2, r2
 80022d0:	603a      	str	r2, [r7, #0]
  return result;
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	fab2 f282 	clz	r2, r2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	40d3      	lsrs	r3, r2
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	08002c34 	.word	0x08002c34

080022f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e042      	b.n	800238c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7fe fa30 	bl	8000780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2224      	movs	r2, #36	; 0x24
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002336:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 fab7 	bl	80028ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800234c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800235c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800236c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d16d      	bne.n	8002490 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <HAL_UART_Transmit+0x2c>
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e066      	b.n	8002492 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2221      	movs	r2, #33	; 0x21
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023d2:	f7fe fd5b 	bl	8000e8c <HAL_GetTick>
 80023d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ec:	d108      	bne.n	8002400 <HAL_UART_Transmit+0x6c>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d104      	bne.n	8002400 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	e003      	b.n	8002408 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002408:	e02a      	b.n	8002460 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2200      	movs	r2, #0
 8002412:	2180      	movs	r1, #128	; 0x80
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f9da 	bl	80027ce <UART_WaitOnFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e036      	b.n	8002492 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10b      	bne.n	8002442 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002438:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	3302      	adds	r3, #2
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	e007      	b.n	8002452 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	3301      	adds	r3, #1
 8002450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1cf      	bne.n	800240a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2200      	movs	r2, #0
 8002472:	2140      	movs	r1, #64	; 0x40
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f9aa 	bl	80027ce <UART_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e006      	b.n	8002492 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3720      	adds	r7, #32
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b08a      	sub	sp, #40	; 0x28
 800249e:	af02      	add	r7, sp, #8
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	603b      	str	r3, [r7, #0]
 80024a6:	4613      	mov	r3, r2
 80024a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d17c      	bne.n	80025b4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_UART_Receive+0x2c>
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e075      	b.n	80025b6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2222      	movs	r2, #34	; 0x22
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024de:	f7fe fcd5 	bl	8000e8c <HAL_GetTick>
 80024e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f8:	d108      	bne.n	800250c <HAL_UART_Receive+0x72>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d104      	bne.n	800250c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	e003      	b.n	8002514 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002514:	e043      	b.n	800259e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2200      	movs	r2, #0
 800251e:	2120      	movs	r1, #32
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f954 	bl	80027ce <UART_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e042      	b.n	80025b6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10c      	bne.n	8002550 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	b29b      	uxth	r3, r3
 800253e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002542:	b29a      	uxth	r2, r3
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	3302      	adds	r3, #2
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	e01f      	b.n	8002590 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002558:	d007      	beq.n	800256a <HAL_UART_Receive+0xd0>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10a      	bne.n	8002578 <HAL_UART_Receive+0xde>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e008      	b.n	800258a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002584:	b2da      	uxtb	r2, r3
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3301      	adds	r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1b6      	bne.n	8002516 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e000      	b.n	80025b6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025b4:	2302      	movs	r3, #2
  }
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b0a0      	sub	sp, #128	; 0x80
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	330c      	adds	r3, #12
 80025cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d0:	e853 3f00 	ldrex	r3, [r3]
 80025d4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80025d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025d8:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80025dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80025e6:	66ba      	str	r2, [r7, #104]	; 0x68
 80025e8:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80025ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025ee:	e841 2300 	strex	r3, r2, [r1]
 80025f2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80025f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1e5      	bne.n	80025c6 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3314      	adds	r3, #20
 8002600:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002604:	e853 3f00 	ldrex	r3, [r3]
 8002608:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800260a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260c:	f023 0301 	bic.w	r3, r3, #1
 8002610:	67bb      	str	r3, [r7, #120]	; 0x78
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3314      	adds	r3, #20
 8002618:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800261a:	657a      	str	r2, [r7, #84]	; 0x54
 800261c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002620:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002622:	e841 2300 	strex	r3, r2, [r1]
 8002626:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1e5      	bne.n	80025fa <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	2b01      	cmp	r3, #1
 8002634:	d119      	bne.n	800266a <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	330c      	adds	r3, #12
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002640:	e853 3f00 	ldrex	r3, [r3]
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	f023 0310 	bic.w	r3, r3, #16
 800264c:	677b      	str	r3, [r7, #116]	; 0x74
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	330c      	adds	r3, #12
 8002654:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002656:	643a      	str	r2, [r7, #64]	; 0x40
 8002658:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800265c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800265e:	e841 2300 	strex	r3, r2, [r1]
 8002662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1e5      	bne.n	8002636 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d136      	bne.n	80026e6 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3314      	adds	r3, #20
 800267e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	e853 3f00 	ldrex	r3, [r3]
 8002686:	61fb      	str	r3, [r7, #28]
   return(result);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800268e:	673b      	str	r3, [r7, #112]	; 0x70
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	3314      	adds	r3, #20
 8002696:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002698:	62fa      	str	r2, [r7, #44]	; 0x2c
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800269e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a0:	e841 2300 	strex	r3, r2, [r1]
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1e5      	bne.n	8002678 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d018      	beq.n	80026e6 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	2200      	movs	r2, #0
 80026ba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe fcd0 	bl	8001066 <HAL_DMA_Abort>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00c      	beq.n	80026e6 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe fd38 	bl	8001146 <HAL_DMA_GetError>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b20      	cmp	r3, #32
 80026da:	d104      	bne.n	80026e6 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2210      	movs	r2, #16
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e052      	b.n	800278c <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	d136      	bne.n	8002762 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3314      	adds	r3, #20
 80026fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	e853 3f00 	ldrex	r3, [r3]
 8002702:	60bb      	str	r3, [r7, #8]
   return(result);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800270a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3314      	adds	r3, #20
 8002712:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002714:	61ba      	str	r2, [r7, #24]
 8002716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002718:	6979      	ldr	r1, [r7, #20]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	e841 2300 	strex	r3, r2, [r1]
 8002720:	613b      	str	r3, [r7, #16]
   return(result);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e5      	bne.n	80026f4 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d018      	beq.n	8002762 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	2200      	movs	r2, #0
 8002736:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe fc92 	bl	8001066 <HAL_DMA_Abort>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00c      	beq.n	8002762 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe fcfa 	bl	8001146 <HAL_DMA_GetError>
 8002752:	4603      	mov	r3, r0
 8002754:	2b20      	cmp	r3, #32
 8002756:	d104      	bne.n	8002762 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2210      	movs	r2, #16
 800275c:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e014      	b.n	800278c <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->gState = HAL_UART_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3780      	adds	r7, #128	; 0x80
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	4313      	orrs	r3, r2
 80027c2:	b2db      	uxtb	r3, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b090      	sub	sp, #64	; 0x40
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4613      	mov	r3, r2
 80027dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027de:	e050      	b.n	8002882 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e6:	d04c      	beq.n	8002882 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <UART_WaitOnFlagUntilTimeout+0x30>
 80027ee:	f7fe fb4d 	bl	8000e8c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d241      	bcs.n	8002882 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	330c      	adds	r3, #12
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	e853 3f00 	ldrex	r3, [r3]
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	330c      	adds	r3, #12
 800281c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800281e:	637a      	str	r2, [r7, #52]	; 0x34
 8002820:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002822:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002826:	e841 2300 	strex	r3, r2, [r1]
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1e5      	bne.n	80027fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	3314      	adds	r3, #20
 8002838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	e853 3f00 	ldrex	r3, [r3]
 8002840:	613b      	str	r3, [r7, #16]
   return(result);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3314      	adds	r3, #20
 8002850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002852:	623a      	str	r2, [r7, #32]
 8002854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002856:	69f9      	ldr	r1, [r7, #28]
 8002858:	6a3a      	ldr	r2, [r7, #32]
 800285a:	e841 2300 	strex	r3, r2, [r1]
 800285e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1e5      	bne.n	8002832 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e00f      	b.n	80028a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4013      	ands	r3, r2
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	429a      	cmp	r2, r3
 8002890:	bf0c      	ite	eq
 8002892:	2301      	moveq	r3, #1
 8002894:	2300      	movne	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	429a      	cmp	r2, r3
 800289e:	d09f      	beq.n	80027e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3740      	adds	r7, #64	; 0x40
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028ec:	f023 030c 	bic.w	r3, r3, #12
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	430b      	orrs	r3, r1
 80028f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699a      	ldr	r2, [r3, #24]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a57      	ldr	r2, [pc, #348]	; (8002a74 <UART_SetConfig+0x1c8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <UART_SetConfig+0x78>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a56      	ldr	r2, [pc, #344]	; (8002a78 <UART_SetConfig+0x1cc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d103      	bne.n	800292c <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002924:	f7ff fcc4 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	e002      	b.n	8002932 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800292c:	f7ff fc9e 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 8002930:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800293a:	d14c      	bne.n	80029d6 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	009a      	lsls	r2, r3, #2
 8002946:	441a      	add	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	4a4a      	ldr	r2, [pc, #296]	; (8002a7c <UART_SetConfig+0x1d0>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	0119      	lsls	r1, r3, #4
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	009a      	lsls	r2, r3, #2
 8002966:	441a      	add	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002972:	4b42      	ldr	r3, [pc, #264]	; (8002a7c <UART_SetConfig+0x1d0>)
 8002974:	fba3 0302 	umull	r0, r3, r3, r2
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	2064      	movs	r0, #100	; 0x64
 800297c:	fb00 f303 	mul.w	r3, r0, r3
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	3332      	adds	r3, #50	; 0x32
 8002986:	4a3d      	ldr	r2, [pc, #244]	; (8002a7c <UART_SetConfig+0x1d0>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002994:	4419      	add	r1, r3
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	009a      	lsls	r2, r3, #2
 80029a0:	441a      	add	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ac:	4b33      	ldr	r3, [pc, #204]	; (8002a7c <UART_SetConfig+0x1d0>)
 80029ae:	fba3 0302 	umull	r0, r3, r3, r2
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	2064      	movs	r0, #100	; 0x64
 80029b6:	fb00 f303 	mul.w	r3, r0, r3
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	3332      	adds	r3, #50	; 0x32
 80029c0:	4a2e      	ldr	r2, [pc, #184]	; (8002a7c <UART_SetConfig+0x1d0>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	f003 0207 	and.w	r2, r3, #7
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	440a      	add	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029d4:	e04a      	b.n	8002a6c <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	009a      	lsls	r2, r3, #2
 80029e0:	441a      	add	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	4a23      	ldr	r2, [pc, #140]	; (8002a7c <UART_SetConfig+0x1d0>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	0119      	lsls	r1, r3, #4
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	009a      	lsls	r2, r3, #2
 8002a00:	441a      	add	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <UART_SetConfig+0x1d0>)
 8002a0e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	2064      	movs	r0, #100	; 0x64
 8002a16:	fb00 f303 	mul.w	r3, r0, r3
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	3332      	adds	r3, #50	; 0x32
 8002a20:	4a16      	ldr	r2, [pc, #88]	; (8002a7c <UART_SetConfig+0x1d0>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a2c:	4419      	add	r1, r3
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	009a      	lsls	r2, r3, #2
 8002a38:	441a      	add	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a44:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <UART_SetConfig+0x1d0>)
 8002a46:	fba3 0302 	umull	r0, r3, r3, r2
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2064      	movs	r0, #100	; 0x64
 8002a4e:	fb00 f303 	mul.w	r3, r0, r3
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	3332      	adds	r3, #50	; 0x32
 8002a58:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <UART_SetConfig+0x1d0>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	f003 020f 	and.w	r2, r3, #15
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	440a      	add	r2, r1
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40011000 	.word	0x40011000
 8002a78:	40011400 	.word	0x40011400
 8002a7c:	51eb851f 	.word	0x51eb851f

08002a80 <memset>:
 8002a80:	4603      	mov	r3, r0
 8002a82:	4402      	add	r2, r0
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d100      	bne.n	8002a8a <memset+0xa>
 8002a88:	4770      	bx	lr
 8002a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a8e:	e7f9      	b.n	8002a84 <memset+0x4>

08002a90 <__libc_init_array>:
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	2600      	movs	r6, #0
 8002a94:	4d0c      	ldr	r5, [pc, #48]	; (8002ac8 <__libc_init_array+0x38>)
 8002a96:	4c0d      	ldr	r4, [pc, #52]	; (8002acc <__libc_init_array+0x3c>)
 8002a98:	1b64      	subs	r4, r4, r5
 8002a9a:	10a4      	asrs	r4, r4, #2
 8002a9c:	42a6      	cmp	r6, r4
 8002a9e:	d109      	bne.n	8002ab4 <__libc_init_array+0x24>
 8002aa0:	f000 f81a 	bl	8002ad8 <_init>
 8002aa4:	2600      	movs	r6, #0
 8002aa6:	4d0a      	ldr	r5, [pc, #40]	; (8002ad0 <__libc_init_array+0x40>)
 8002aa8:	4c0a      	ldr	r4, [pc, #40]	; (8002ad4 <__libc_init_array+0x44>)
 8002aaa:	1b64      	subs	r4, r4, r5
 8002aac:	10a4      	asrs	r4, r4, #2
 8002aae:	42a6      	cmp	r6, r4
 8002ab0:	d105      	bne.n	8002abe <__libc_init_array+0x2e>
 8002ab2:	bd70      	pop	{r4, r5, r6, pc}
 8002ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab8:	4798      	blx	r3
 8002aba:	3601      	adds	r6, #1
 8002abc:	e7ee      	b.n	8002a9c <__libc_init_array+0xc>
 8002abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac2:	4798      	blx	r3
 8002ac4:	3601      	adds	r6, #1
 8002ac6:	e7f2      	b.n	8002aae <__libc_init_array+0x1e>
 8002ac8:	08002c44 	.word	0x08002c44
 8002acc:	08002c44 	.word	0x08002c44
 8002ad0:	08002c44 	.word	0x08002c44
 8002ad4:	08002c48 	.word	0x08002c48

08002ad8 <_init>:
 8002ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ada:	bf00      	nop
 8002adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ade:	bc08      	pop	{r3}
 8002ae0:	469e      	mov	lr, r3
 8002ae2:	4770      	bx	lr

08002ae4 <_fini>:
 8002ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae6:	bf00      	nop
 8002ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aea:	bc08      	pop	{r3}
 8002aec:	469e      	mov	lr, r3
 8002aee:	4770      	bx	lr
